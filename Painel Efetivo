const fs = require('fs');
const readline = require('readline-sync');
const { Client, GatewayIntentBits, EmbedBuilder } = require('discord.js');

const CONFIG_FILE = './config.json';

let client = null;
let config = { token: '', status: 'stopped' };

// Salvar config
function saveConfig(configData) {
  fs.writeFileSync(CONFIG_FILE, JSON.stringify(configData, null, 2));
}

// Carregar config
function loadConfig() {
  if (!fs.existsSync(CONFIG_FILE)) {
    const defaultConfig = { token: '', status: 'stopped' };
    saveConfig(defaultConfig);
    return defaultConfig;
  }
  const data = fs.readFileSync(CONFIG_FILE);
  return JSON.parse(data);
}

// Alterar token do bot
function alterarToken() {
  const novoToken = readline.question('Digite o novo token do bot: ');
  config.token = novoToken.trim();
  saveConfig(config);
  console.log('✅ Token atualizado com sucesso!');
}

// Ligar bot (conectar)
async function ligarBot() {
  config = loadConfig();

  if (!config.token || config.token.length < 10) {
    console.log('⚠️ Token não configurado ou inválido. Use a opção 4 para alterar o token.');
    return;
  }

  if (client && client.isReady()) {
    console.log('Bot já está ligado! Reiniciando conexão...');
    await client.destroy();
    client = null;
  }

  client = new Client({ intents: [GatewayIntentBits.Guilds, GatewayIntentBits.GuildMessages, GatewayIntentBits.MessageContent] });

  client.once('ready', () => {
    console.log(`✅ Bot conectado como ${client.user.tag}`);
    config.status = 'started';
    saveConfig(config);
  });

  client.on('error', (err) => {
    console.error('Erro do client:', err);
  });

  try {
    await client.login(config.token);
  } catch (err) {
    console.error('❌ Falha ao logar:', err.message);
  }
}

// Desligar bot (desconectar)
async function desligarBot() {
  if (!client || !client.isReady()) {
    console.log('Bot não está ligado.');
    return;
  }

  await client.destroy();
  client = null;
  config.status = 'stopped';
  saveConfig(config);
  console.log('✅ Bot desligado com sucesso!');
}

// Enviar mensagem simples para canal
async function enviarMensagem() {
  if (!client || !client.isReady()) {
    console.log('⚠️ Bot não está ligado! Ligue o bot antes de enviar mensagens.');
    return;
  }
  const canalId = readline.question('Digite o ID do canal para enviar a mensagem: ').trim();
  const mensagem = readline.question('Digite a mensagem a ser enviada: ').trim();

  try {
    const canal = await client.channels.fetch(canalId);
    if (!canal || !canal.isTextBased()) {
      console.log('⚠️ Canal inválido ou não é um canal de texto.');
      return;
    }
    await canal.send(mensagem);
    console.log('✅ Mensagem enviada com sucesso!');
  } catch (error) {
    console.error('❌ Erro ao enviar mensagem:', error.message);
  }
}

// Enviar embed personalizado para canal
async function enviarEmbed() {
  if (!client || !client.isReady()) {
    console.log('⚠️ Bot não está ligado! Ligue o bot antes de enviar mensagens.');
    return;
  }
  const canalId = readline.question('Digite o ID do canal para enviar o embed: ').trim();

  console.log('Escolha uma cor para o embed:');
  console.log('[1] Azul (#3498db)');
  console.log('[2] Roxo (#9b59b6)');
  console.log('[3] Vermelho (#e74c3c)');
  console.log('[4] Preto (#000000)');
  const corOpcao = readline.question('Digite o número da cor desejada: ').trim();

  let corHex = '#3498db'; // padrão azul
  switch (corOpcao) {
    case '1': corHex = '#3498db'; break; // azul
    case '2': corHex = '#9b59b6'; break; // roxo
    case '3': corHex = '#e74c3c'; break; // vermelho
    case '4': corHex = '#000000'; break; // preto
    default: console.log('Cor inválida, usando azul padrão.'); break;
  }

  const textoEmbed = readline.question('Digite o texto do embed: ').trim();

  try {
    const canal = await client.channels.fetch(canalId);
    if (!canal || !canal.isTextBased()) {
      console.log('⚠️ Canal inválido ou não é um canal de texto.');
      return;
    }

    const embed = new EmbedBuilder()
      .setDescription(textoEmbed)
      .setColor(corHex)
      .setTimestamp();

    await canal.send({ embeds: [embed] });
    console.log('✅ Embed enviado com sucesso!');
  } catch (error) {
    console.error('❌ Erro ao enviar embed:', error.message);
  }
}

// Menu principal
async function menu() {
  config = loadConfig();

  while (true) {
    console.clear();
    console.log('/ __| \'_ \\ / _ \\| | | | |/ / _ \\ / _` |/ _ \\ \\ / /');
    console.log('\\__ \\ | | | (_) | |_| |   < (_) | (_| |  __/\\ V /');
    console.log('|___/_| |_|\\___/ \\__,_|_|\\_\\___(_)__,_|\\___| \\_/');
    console.log('');
    console.log('- Version: 1.2.0 | Discord Multi-Bot Panel');
    console.log('- Credit: YourName.dev');
    console.log(`- Status: ${config.status.toUpperCase()}`);
    console.log('');
    console.log('╭──────────── discord.gg/seuservidor - Setup Menu ─────────────╮');
    console.log('│ ╭────────┬──────────────────────────────────────────────────╮ │');
    console.log('│ │   No   │ Setup Option                                     │ │');
    console.log('│ ├────────┼──────────────────────────────────────────────────┤ │');
    console.log('│ │ [ 1 ]  Criar todos os arquivos do bot            │ │');
    console.log('│ │ [ 2 ]  Apenas criar config.json                  │ │');
    console.log('│ │ [ 3 ]  Sair do painel                            │ │');
    console.log('│ │ [ 4 ]  Alterar token do bot                      │ │');
    console.log('│ │ [ 5 ]  Ligar o bot (start)                       │ │');
    console.log('│ │ [ 6 ]  Desligar o bot (stop)                     │ │');
    console.log('│ │ [ 7 ]  Enviar mensagem para canal específico     │ │');
    console.log('│ │ [ 8 ]  Enviar mensagem com embed personalizado   │ │');
    console.log('│ ╰────────┴──────────────────────────────────────────────────╯ │');
    console.log('╰──────────────────────────────────────────────────────────────╯');
    const opcao = readline.question('[SetupBot] ➤ Digite o número da opção desejada: ');

    switch (opcao.trim()) {
      case '1':
        if (!fs.existsSync(CONFIG_FILE)) {
          saveConfig({ token: '', status: 'stopped' });
          console.log('✅ Arquivo config.json criado!');
        } else {
          console.log('Arquivo config.json já existe.');
        }
        break;
      case '2':
        saveConfig({ token: '', status: 'stopped' });
        console.log('✅ Arquivo config.json (padrão) criado!');
        break;
      case '3':
        console.log('Saindo do painel...');
        process.exit(0);
      case '4':
        alterarToken();
        break;
      case '5':
        await ligarBot();
        break;
      case '6':
        await desligarBot();
        break;
      case '7':
        await enviarMensagem();
        break;
      case '8':
        await enviarEmbed();
        break;
      default:
        console.log('Opção inválida, tente novamente.');
        break;
    }

    console.log('\nPressione ENTER para voltar ao menu...');
    readline.question('');
  }
}

menu();
