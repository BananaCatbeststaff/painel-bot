const readline = require('readline');
const fs = require('fs');
const path = require('path');
const { spawn } = require('child_process');

let botProcess = null;
const chavePath = path.join(__dirname, 'whitelist.json');
const chavesPermitidas = [
  'Carlos-124J@sfnj$%fjsaAFK2',
  'Gato-112587k1h√ßlJHL!%h52'
];

// Garante que o whitelist.json exista
if (!fs.existsSync(chavePath)) {
  fs.writeFileSync(chavePath, JSON.stringify({ chave: '' }, null, 2));
}

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

function verificarChave(callback) {
  const data = JSON.parse(fs.readFileSync(chavePath, 'utf8'));
  if (chavesPermitidas.includes(data.chave)) {
    callback();
  } else {
    console.log('üîí Acesso negado. Chave inv√°lida.');
    rl.question('üîë Digite sua chave de acesso: ', (input) => {
      if (chavesPermitidas.includes(input.trim())) {
        fs.writeFileSync(chavePath, JSON.stringify({ chave: input.trim() }, null, 2));
        console.log('‚úÖ Acesso autorizado!');
        setTimeout(() => callback(), 1500);
      } else {
        console.log('‚ùå Chave incorreta. Encerrando...');
        rl.close();
      }
    });
  }
}

function showMenu() {
  console.clear();
  console.log(`
/ __| '_ \\ / _ \\| | | | |/ / _ \\ / _\` |/ _ \\ \\ / /
\\__ \\ | | | (_) | |_| |   < (_) | (_| |  __/\\ V /
|___/_| |_|\\___/ \\__,_|_|\\_\\___(_)__,_|\\___| \\_/

- Version: 1.2.0 | Discord Multi-Bot Panel
- Credit: YourName.dev
- Status: Multi-funcional

‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ discord.gg/seuservidor - Setup Menu ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ
‚îÇ ‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ ‚îÇ
‚îÇ ‚îÇ   No   ‚îÇ Setup Option                                     ‚îÇ ‚îÇ
‚îÇ ‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§ ‚îÇ
‚îÇ ‚îÇ [ 1 ]  ‚îÇ Criar todos os arquivos do bot                   ‚îÇ ‚îÇ
‚îÇ ‚îÇ [ 2 ]  ‚îÇ Apenas criar config.json                         ‚îÇ ‚îÇ
‚îÇ ‚îÇ [ 3 ]  ‚îÇ Sair do painel                                   ‚îÇ ‚îÇ
‚îÇ ‚îÇ [ 4 ]  ‚îÇ Alterar token do bot                             ‚îÇ ‚îÇ
‚îÇ ‚îÇ [ 5 ]  ‚îÇ Ligar o bot (start)                              ‚îÇ ‚îÇ
‚îÇ ‚îÇ [ 6 ]  ‚îÇ Desligar o bot (stop)                            ‚îÇ ‚îÇ
‚îÇ ‚îÇ [ 7 ]  ‚îÇ Enviar mensagem para canal espec√≠fico            ‚îÇ ‚îÇ
‚îÇ ‚îÇ [ 8 ]  ‚îÇ Mostrar chave atual (whitelist)                  ‚îÇ ‚îÇ
‚îÇ ‚îÇ [ 9 ]  ‚îÇ Enviar embed para canal espec√≠fico               ‚îÇ ‚îÇ
‚îÇ | [ 10 ]  ‚îÇ Setup Ticket (estilo Ticket Tool)                ‚îÇ ‚îÇ       
‚îÇ ‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ ‚îÇ
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ
`);

  rl.question('[SetupBot] ‚û§ Digite o n√∫mero da op√ß√£o desejada: ', (answer) => {
    switch (answer.trim()) {
      case '1': criarArquivos(true); break;
      case '2': criarArquivos(false); break;
      case '3': console.log('‚ùå Saindo...'); rl.close(); break;
      case '4': alterarToken(); break;
      case '5': ligarBot(); break;
      case '6': desligarBot(); break;
      case '7': enviarMensagem(); break;
      case '8': mostrarChave(); break;
      case '9': enviarEmbed(); break;
      case '10': setupTicketTool(); break;
      default:
        console.log('‚ö†Ô∏è Op√ß√£o inv√°lida. Tente novamente.');
        setTimeout(showMenu, 1500);
    }
  });
}

function criarArquivos(tudo) {
  const estrutura = {
    'config.json': `{
  "token": "SEU_TOKEN_DO_BOT",
  "prefix": "!"
}`
  };

  if (tudo) {
    estrutura['index.js'] = `const { Client, GatewayIntentBits } = require('discord.js');
const config = require('./config.json');
const client = new Client({ intents: [GatewayIntentBits.Guilds, GatewayIntentBits.GuildMessages, GatewayIntentBits.MessageContent] });

client.once('ready', () => console.log(\`ü§ñ Bot online como \${client.user.tag}\`));
client.on('messageCreate', msg => {
  if (msg.content === config.prefix + "ping") msg.reply("üèì Pong!");
});
client.login(config.token);`;

    estrutura['commands/ping.js'] = `module.exports = {
  name: 'ping',
  description: 'Responde com Pong!',
  execute(message) {
    message.reply('üèì Pong!');
  },
};`;
  }

  for (const [caminho, conteudo] of Object.entries(estrutura)) {
    const completo = path.join(process.cwd(), caminho);
    const dir = path.dirname(completo);
    if (!fs.existsSync(dir)) fs.mkdirSync(dir, { recursive: true });
    fs.writeFileSync(completo, conteudo.trim());
    console.log(`‚úÖ Arquivo criado: ${caminho}`);
  }

  if (tudo) {
    const pkgPath = path.join(process.cwd(), 'package.json');
    if (!fs.existsSync(pkgPath)) {
      const pkg = {
        name: 'discord-multi-bot',
        version: '1.0.0',
        main: 'index.js',
        scripts: { start: 'node index.js' },
        dependencies: { "discord.js": "^14.0.0" }
      };
      fs.writeFileSync(pkgPath, JSON.stringify(pkg, null, 2));
      console.log('üì¶ package.json criado!');
    }
  }

  console.log('\nüéâ Setup finalizado! Execute:');
  console.log('   1Ô∏è‚É£ npm install');
  console.log('   2Ô∏è‚É£ node painel.js e escolha [5] para iniciar o bot');
  setTimeout(showMenu, 3000);
}

function alterarToken() {
  const configPath = path.join(process.cwd(), 'config.json');
  if (!fs.existsSync(configPath)) {
    console.log('‚ö†Ô∏è config.json n√£o encontrado!');
    return setTimeout(showMenu, 1500);
  }
  rl.question('[TokenBot] ‚û§ Digite o novo token: ', (novoToken) => {
    try {
      const config = JSON.parse(fs.readFileSync(configPath, 'utf8'));
      config.token = novoToken;
      fs.writeFileSync(configPath, JSON.stringify(config, null, 2));
      console.log('‚úÖ Token atualizado!');
    } catch (err) {
      console.log('‚ùå Erro ao alterar token:', err.message);
    }
    setTimeout(showMenu, 1500);
  });
}

function ligarBot() {
  if (botProcess) {
    console.log('‚ö†Ô∏è Bot j√° est√° em execu√ß√£o.');
    return setTimeout(showMenu, 1500);
  }
  botProcess = spawn('node', ['index.js'], { stdio: 'inherit' });
  console.log('‚úÖ Bot iniciado.');
  setTimeout(showMenu, 1500);
}

function desligarBot() {
  if (botProcess) {
    botProcess.kill();
    botProcess = null;
    console.log('üõë Bot desligado.');
  } else {
    console.log('‚ö†Ô∏è Bot n√£o est√° em execu√ß√£o.');
  }
  setTimeout(showMenu, 1500);
}

function enviarMensagem() {
  rl.question('[Canal] ‚û§ Cole o link do canal (ex: https://discord.com/channels/123/456): ', (link) => {
    rl.question('[Mensagem] ‚û§ Digite a mensagem: ', (texto) => {
      const partes = link.split('/');
      const channelId = partes[partes.length - 1];
      const config = JSON.parse(fs.readFileSync('./config.json', 'utf8'));
      const { Client, GatewayIntentBits } = require('discord.js');
      const client = new Client({ intents: [GatewayIntentBits.Guilds, GatewayIntentBits.GuildMessages] });

      client.once('ready', async () => {
        try {
          const canal = await client.channels.fetch(channelId);
          if (!canal) throw new Error('Canal n√£o encontrado.');
          await canal.send(texto);
          console.log('‚úÖ Mensagem enviada com sucesso!');
        } catch (e) {
          console.log('‚ùå Erro ao enviar mensagem:', e.message);
        }
        client.destroy();
        setTimeout(showMenu, 1500);
      });

      client.login(config.token);
    });
  });
}

function mostrarChave() {
  const data = JSON.parse(fs.readFileSync(chavePath, 'utf8'));
  console.log(`üîë Chave atual: ${data.chave || 'Nenhuma chave cadastrada.'}`);
  setTimeout(showMenu, 2000);
}

function enviarEmbed() {
  rl.question('[Canal] ‚û§ Cole o link do canal (ex: https://discord.com/channels/123/456): ', (link) => {
    rl.question('[T√≠tulo] ‚û§ Digite o t√≠tulo do embed: ', (titulo) => {
      rl.question('[Descri√ß√£o] ‚û§ Digite a descri√ß√£o do embed: ', (descricao) => {
        rl.question('[Cor] ‚û§ Digite a cor do embed (hex ou nome - ex: #0099ff): ', (cor) => {
          const partes = link.split('/');
          const channelId = partes[partes.length - 1];
          const config = JSON.parse(fs.readFileSync('./config.json', 'utf8'));
          const { Client, GatewayIntentBits, EmbedBuilder } = require('discord.js');

          const client = new Client({ intents: [GatewayIntentBits.Guilds, GatewayIntentBits.GuildMessages] });

          client.once('ready', async () => {
            try {
              const canal = await client.channels.fetch(channelId);
              if (!canal) throw new Error('Canal n√£o encontrado.');

              const embed = new EmbedBuilder()
                .setTitle(titulo)
                .setDescription(descricao)
                .setColor(cor || '#0099ff')
                .setFooter({ text: 'Enviado pelo Painel Multi-Bot' })
                .setTimestamp();

              await canal.send({ embeds: [embed] });
              console.log('‚úÖ Embed enviada com sucesso!');
            } catch (e) {
              console.log('‚ùå Erro ao enviar embed:', e.message);
            }

            client.destroy();
            setTimeout(showMenu, 2000);
          });

          client.login(config.token);
        });
      });
    });
  });
}

function setupTicketTool() {
  rl.question('[Canal] ‚û§ Cole o link do canal para o painel de tickets: ', (link) => {
    rl.question('[T√≠tulo] ‚û§ T√≠tulo do painel: ', (titulo) => {
      rl.question('[Descri√ß√£o] ‚û§ Mensagem do painel: ', (descricao) => {
        rl.question('[Emoji] ‚û§ Emoji do bot√£o (ex: üé´): ', (emoji) => {
          rl.question('[Bot√£o] ‚û§ Nome do bot√£o (ex: Abrir Ticket): ', (label) => {
            rl.question('[Nome do Ticket] ‚û§ Nome base (ex: ticket): ', (ticketName) => {
              const partes = link.split('/');
              const channelId = partes[partes.length - 1];
              const config = JSON.parse(fs.readFileSync('./config.json', 'utf8'));
              const {
                Client,
                GatewayIntentBits,
                ActionRowBuilder,
                ButtonBuilder,
                ButtonStyle,
                EmbedBuilder,
                PermissionsBitField,
              } = require('discord.js');

              const client = new Client({
                intents: [
                  GatewayIntentBits.Guilds,
                  GatewayIntentBits.GuildMessages,
                  GatewayIntentBits.MessageContent,
                  GatewayIntentBits.GuildMembers,
                  GatewayIntentBits.MessageContent,
                  GatewayIntentBits.GuildMessageReactions,
                  GatewayIntentBits.DirectMessages,
                  GatewayIntentBits.GuildMessageTyping,
                  GatewayIntentBits.GuildPresences
                ],
              });

              client.once('ready', async () => {
                try {
                  const canal = await client.channels.fetch(channelId);
                  if (!canal) throw new Error('Canal n√£o encontrado.');

                  const embed = new EmbedBuilder()
                    .setTitle(titulo)
                    .setDescription(descricao)
                    .setColor(0x2b2d31)
                    .setFooter({ text: 'Sistema de Suporte' })
                    .setTimestamp();

                  const botao = new ButtonBuilder()
                    .setCustomId(`ticket_create_${ticketName}`)
                    .setLabel(label)
                    .setEmoji(emoji)
                    .setStyle(ButtonStyle.Secondary);

                  const row = new ActionRowBuilder().addComponents(botao);

                  await canal.send({ embeds: [embed], components: [row] });

                  client.on('interactionCreate', async (interaction) => {
                    if (!interaction.isButton()) return;
                    if (!interaction.customId.startsWith('ticket_create_')) return;

                    const user = interaction.user;
                    const guild = interaction.guild;

                    const channel = await guild.channels.create({
                      name: `ticket-${user.username}`,
                      type: 0, // GuildText
                      permissionOverwrites: [
                        {
                          id: guild.roles.everyone,
                          deny: [PermissionsBitField.Flags.ViewChannel],
                        },
                        {
                          id: user.id,
                          allow: [PermissionsBitField.Flags.ViewChannel, PermissionsBitField.Flags.SendMessages],
                        },
                        {
                          id: '1376087634031411325',
                          allow: [PermissionsBitField.Flags.ViewChannel, PermissionsBitField.Flags.SendMessages],
                        },
                        {
                          id: '1376087634014638151',
                          allow: [PermissionsBitField.Flags.ViewChannel, PermissionsBitField.Flags.SendMessages],
                        },
                      ],
                    });

                    const embedTicket = new EmbedBuilder()
                      .setTitle('üéüÔ∏è Suporte Aberto')
                      .setDescription(`Ol√° ${user}, um membro da equipe ir√° te ajudar em breve.\nClique no bot√£o abaixo para **fechar** este ticket quando n√£o precisar mais de suporte.`)
                      .setColor(0x2b2d31)
                      .setTimestamp();

                    const closeButton = new ButtonBuilder()
                      .setCustomId('ticket_close')
                      .setLabel('Fechar Ticket')
                      .setStyle(ButtonStyle.Danger);

                    const rowClose = new ActionRowBuilder().addComponents(closeButton);

                    await channel.send({
                      content: `<@${user.id}>`,
                      embeds: [embedTicket],
                      components: [rowClose],
                    });

                    await interaction.reply({ content: `üé´ Ticket criado: ${channel}`, ephemeral: true });
                  });

                  client.on('interactionCreate', async (interaction) => {
                    if (!interaction.isButton()) return;
                    if (interaction.customId !== 'ticket_close') return;

                    await interaction.reply({
                      content: 'Tem certeza que deseja fechar o ticket?',
                      components: [
                        new ActionRowBuilder().addComponents(
                          new ButtonBuilder()
                            .setCustomId('confirm_close')
                            .setLabel('‚úÖ Confirmar')
                            .setStyle(ButtonStyle.Danger),
                          new ButtonBuilder()
                            .setCustomId('cancel_close')
                            .setLabel('‚ùå Cancelar')
                            .setStyle(ButtonStyle.Secondary)
                        )
                      ],
                      ephemeral: true,
                    });
                  });

                  client.on('interactionCreate', async (interaction) => {
                    if (!interaction.isButton()) return;

                    if (interaction.customId === 'confirm_close') {
                      await interaction.reply({ content: '‚úÖ Fechando ticket em 5 segundos...', ephemeral: true });
                      setTimeout(() => {
                        interaction.channel.delete().catch(console.error);
                      }, 5000);
                    }

                    if (interaction.customId === 'cancel_close') {
                      await interaction.reply({ content: '‚ùå Cancelamento confirmado.', ephemeral: true });
                    }
                  });

                  console.log('üéüÔ∏è Painel de ticket enviado com sucesso!');
                } catch (e) {
                  console.log('‚ùå Erro ao enviar painel:', e.message);
                }

                // client.destroy(); // Mant√©m o bot online para capturar intera√ß√µes
                setTimeout(showMenu, 1500);
              });

              client.login(config.token);
            });
          });
        });
      });
    });
  });
}

// Inicializa com verifica√ß√£o de chave whitelist
verificarChave(showMenu);
