const readline = require('readline');
const fs = require('fs');
const path = require('path');
const { spawn } = require('child_process');
let botProcess = null;

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

// Painel visual
console.clear();
console.log(`
/ __| '_ \\ / _ \\| | | | |/ / _ \\ / _\` |/ _ \\ \\ / /
\\__ \\ | | | (_) | |_| |   < (_) | (_| |  __/\\ V /
|___/_| |_|\\___/ \\__,_|_|\\_\\___(_)__,_|\\___| \\_/

- Version: 1.2.0 | Discord Multi-Bot Panel
- Credit: YourName.dev
- Status: Multi-funcional

‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ discord.gg/seuservidor - Setup Menu ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ
‚îÇ ‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ ‚îÇ
‚îÇ ‚îÇ   No   ‚îÇ Setup Option                                     ‚îÇ ‚îÇ
‚îÇ ‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§ ‚îÇ
‚îÇ ‚îÇ [ 1 ]  ‚îÇ Criar todos os arquivos do bot                   ‚îÇ ‚îÇ
‚îÇ ‚îÇ [ 2 ]  ‚îÇ Apenas criar config.json                         ‚îÇ ‚îÇ
‚îÇ ‚îÇ [ 3 ]  ‚îÇ Sair do painel                                   ‚îÇ ‚îÇ
‚îÇ ‚îÇ [ 4 ]  ‚îÇ Alterar token do bot                             ‚îÇ ‚îÇ
‚îÇ ‚îÇ [ 5 ]  ‚îÇ Ligar o bot (start)                              ‚îÇ ‚îÇ
‚îÇ ‚îÇ [ 6 ]  ‚îÇ Desligar o bot (stop)                            ‚îÇ ‚îÇ
‚îÇ ‚îÇ [ 7 ]  ‚îÇ Enviar mensagem para canal espec√≠fico            ‚îÇ ‚îÇ
‚îÇ ‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ ‚îÇ
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ
`);

rl.question('[SetupBot] ‚û§ Digite o n√∫mero da op√ß√£o desejada: ', (answer) => {
  switch (answer.trim()) {
    case '1': criarArquivos(true); break;
    case '2': criarArquivos(false); break;
    case '3': console.log('‚ùå Saindo...'); rl.close(); break;
    case '4': alterarToken(); break;
    case '5': ligarBot(); break;
    case '6': desligarBot(); break;
    case '7': enviarMensagem(); break;
    default: console.log('‚ö†Ô∏è Op√ß√£o inv√°lida. Tente novamente.'); rl.close();
  }
});

function criarArquivos(tudo) {
  const estrutura = {
    'config.json': `{
  "token": "SEU_TOKEN_DO_BOT",
  "prefix": "!"
}`
  };

  if (tudo) {
    estrutura['index.js'] = `const { Client, GatewayIntentBits } = require('discord.js');
const config = require('./config.json');
const client = new Client({ intents: [GatewayIntentBits.Guilds, GatewayIntentBits.GuildMessages, GatewayIntentBits.MessageContent] });

client.once('ready', () => console.log(\`ü§ñ Bot online como \${client.user.tag}\`));
client.on('messageCreate', msg => {
  if (msg.content === config.prefix + "ping") msg.reply("üèì Pong!");
});
client.login(config.token);`;

    estrutura['commands/ping.js'] = `module.exports = {
  name: 'ping',
  description: 'Responde com Pong!',
  execute(message) {
    message.reply('üèì Pong!');
  },
};`;
  }

  for (const [caminho, conteudo] of Object.entries(estrutura)) {
    const completo = path.join(process.cwd(), caminho);
    const dir = path.dirname(completo);
    if (!fs.existsSync(dir)) fs.mkdirSync(dir, { recursive: true });
    fs.writeFileSync(completo, conteudo.trim());
    console.log(`‚úÖ Arquivo criado: ${caminho}`);
  }

  if (tudo) {
    const pkgPath = path.join(process.cwd(), 'package.json');
    if (!fs.existsSync(pkgPath)) {
      const pkg = {
        name: 'discord-multi-bot',
        version: '1.0.0',
        main: 'index.js',
        scripts: { start: 'node index.js' },
        dependencies: { "discord.js": "^14.0.0" }
      };
      fs.writeFileSync(pkgPath, JSON.stringify(pkg, null, 2));
      console.log('üì¶ package.json criado!');
    }
  }

  console.log('\nüéâ Setup finalizado! Execute:');
  console.log('   1Ô∏è‚É£ npm install');
  console.log('   2Ô∏è‚É£ node painel.js e escolha [5] para iniciar o bot');
  rl.close();
}

function alterarToken() {
  const configPath = path.join(process.cwd(), 'config.json');
  if (!fs.existsSync(configPath)) {
    console.log('‚ö†Ô∏è config.json n√£o encontrado!');
    rl.close(); return;
  }
  rl.question('[TokenBot] ‚û§ Digite o novo token: ', (novoToken) => {
    try {
      const config = JSON.parse(fs.readFileSync(configPath, 'utf8'));
      config.token = novoToken;
      fs.writeFileSync(configPath, JSON.stringify(config, null, 2));
      console.log('‚úÖ Token atualizado!');
    } catch (err) {
      console.log('‚ùå Erro ao alterar token:', err.message);
    }
    rl.close();
  });
}

function ligarBot() {
  if (botProcess) {
    console.log('‚ö†Ô∏è Bot j√° est√° em execu√ß√£o.');
    rl.close(); return;
  }
  botProcess = spawn('node', ['index.js'], { stdio: 'inherit' });
  console.log('‚úÖ Bot iniciado.');
  rl.close();
}

function desligarBot() {
  if (botProcess) {
    botProcess.kill();
    botProcess = null;
    console.log('üõë Bot desligado.');
  } else {
    console.log('‚ö†Ô∏è Bot n√£o est√° em execu√ß√£o.');
  }
  rl.close();
}

function enviarMensagem() {
  rl.question('[Canal] ‚û§ Cole o link do canal (ex: https://discord.com/channels/123/456): ', (link) => {
    rl.question('[Mensagem] ‚û§ Digite a mensagem: ', (texto) => {
      const partes = link.split('/');
      const channelId = partes[partes.length - 1];
      const config = JSON.parse(fs.readFileSync('./config.json', 'utf8'));
      const { Client, GatewayIntentBits } = require('discord.js');
      const client = new Client({ intents: [GatewayIntentBits.Guilds, GatewayIntentBits.GuildMessages] });

      client.once('ready', async () => {
        try {
          const canal = await client.channels.fetch(channelId);
          if (!canal) throw new Error('Canal n√£o encontrado.');
          await canal.send(texto);
          console.log('‚úÖ Mensagem enviada com sucesso!');
        } catch (e) {
          console.log('‚ùå Erro ao enviar mensagem:', e.message);
        }
        client.destroy();
        rl.close();
      });

      client.login(config.token);
    });
  });
}
